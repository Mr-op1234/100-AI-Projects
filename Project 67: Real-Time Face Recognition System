Description:
This project builds a real-time face recognition system using a webcam and a pretrained face encoder (like face_recognition library). It compares live faces to a known database of face embeddings.

Goal
Detect and recognize faces from a webcam stream using facial embeddings and cosine similarity.

Code
import cv2
import face_recognition
import numpy as np
import os
 
# Load known face encodings and labels
known_faces = []
known_names = []
 
# Folder with reference images
for file in os.listdir("data/known_faces"):
    image = face_recognition.load_image_file(f"data/known_faces/{file}")
    encoding = face_recognition.face_encodings(image)[0]
    known_faces.append(encoding)
    known_names.append(os.path.splitext(file)[0])  # use filename as name
 
# Start webcam
video = cv2.VideoCapture(0)
print("ðŸŽ¥ Starting camera. Press 'q' to quit.")
 
while True:
    ret, frame = video.read()
    rgb_frame = frame[:, :, ::-1]
 
    # Detect faces
    face_locations = face_recognition.face_locations(rgb_frame)
    face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)
 
    for (top, right, bottom, left), encoding in zip(face_locations, face_encodings):
        # Compare to known faces
        matches = face_recognition.compare_faces(known_faces, encoding)
        name = "Unknown"
 
        # Use face distance to choose best match
        face_distances = face_recognition.face_distance(known_faces, encoding)
        if len(face_distances) > 0:
            best_match_index = np.argmin(face_distances)
            if matches[best_match_index]:
                name = known_names[best_match_index]
 
        # Draw box and label
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
        cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)
 
    # Show the result
    cv2.imshow("Face Recognition", frame)
 
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break
 
video.release()
cv2.destroyAllWindows()
