Description:
This project demonstrates how to manually apply different weight initialization techniques (e.g., Xavier, He) in PyTorch models to improve convergence.

Goal
Initialize network weights using torch.nn.init functions like xavier_uniform_, kaiming_normal_, etc.

Code
import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
 
# Load FashionMNIST
transform = transforms.ToTensor()
train_data = datasets.FashionMNIST(root='./data', train=True, download=True, transform=transform)
train_loader = DataLoader(train_data, batch_size=64, shuffle=True)
 
# Define MLP with custom weight initialization
class InitNet(nn.Module):
    def __init__(self):
        super(InitNet, self).__init__()
        self.fc1 = nn.Linear(28*28, 256)
        self.fc2 = nn.Linear(256, 128)
        self.out = nn.Linear(128, 10)
        self._init_weights()
 
    def _init_weights(self):
        nn.init.xavier_uniform_(self.fc1.weight)         # Xavier initialization
        nn.init.kaiming_normal_(self.fc2.weight)          # He initialization
        nn.init.constant_(self.out.weight, 0.01)          # Constant small weights
        nn.init.zeros_(self.fc1.bias)                     # Zero biases
        nn.init.zeros_(self.fc2.bias)
        nn.init.zeros_(self.out.bias)
 
    def forward(self, x):
        x = x.view(-1, 28*28)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        return self.out(x)
 
model = InitNet()
 
# Define loss and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
 
# Training loop
for epoch in range(5):
    for images, labels in train_loader:
        outputs = model(images)
        loss = criterion(outputs, labels)
 
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
 
    print(f"Epoch {epoch+1}, Loss: {loss.item():.4f}")
