Description:
This project uses the EMNIST dataset (an extended version of MNIST with letters and digits) to train a character recognizer using a convolutional neural network.

Goal
Classify handwritten letters and digits from the EMNIST Balanced dataset using a CNN.

Code
import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
 
# Define transformations (EMNIST images are rotated)
transform = transforms.Compose([
    transforms.RandomRotation((-90, -90)),  # Rotate to make upright
    transforms.ToTensor()
])
 
# Load EMNIST Balanced split (47 classes: digits + letters)
train_data = datasets.EMNIST(root='./data', split='balanced', train=True, download=True, transform=transform)
test_data = datasets.EMNIST(root='./data', split='balanced', train=False, download=True, transform=transform)
 
train_loader = DataLoader(train_data, batch_size=64, shuffle=True)
test_loader = DataLoader(test_data, batch_size=1000)
 
# CNN model for character recognition
class EMNISTClassifier(nn.Module):
    def __init__(self):
        super(EMNISTClassifier, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.fc1 = nn.Linear(64 * 7 * 7, 256)
        self.fc2 = nn.Linear(256, 47)  # EMNIST Balanced has 47 classes
 
    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 64 * 7 * 7)
        x = F.relu(self.fc1(x))
        return self.fc2(x)
 
model = EMNISTClassifier()
 
# Loss and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
 
# Training loop
for epoch in range(5):
    for images, labels in train_loader:
        outputs = model(images)
        loss = criterion(outputs, labels)
 
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
 
    print(f"Epoch {epoch+1}, Loss: {loss.item():.4f}")
 
# Evaluation
correct = 0
total = 0
with torch.no_grad():
    for images, labels in test_loader:
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()
 
print(f"Test Accuracy: {100 * correct / total:.2f}%")
